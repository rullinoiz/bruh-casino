import discord
from discord.ext import commands
import yt_dlp as youtube_dl
import asyncio

import os

discord.opus.load_opus(name=('/opt/homebrew/Cellar/opus/1.3.1/lib/libopus.dylib' if os.uname().sysname == 'Darwin' else '/usr/lib/aarch64-linux-gnu/libopus.so.0')) 

class YTDLSource(discord.PCMVolumeTransformer):
    def __init__(self, source, *, data, volume=0.5):
        super().__init__(source, volume)

        self.data = data

        self.title = data.get('title')
        self.url = data.get('url')

    @classmethod
    async def from_url(cls, url, *, loop=None, stream=False):
        ytdl_format_options = {
            'format': 'bestaudio/best',
            'outtmpl': 'out',
            'restrictfilenames': True,
            'noplaylist': True,
            'nocheckcertificate': True,
            'ignoreerrors': False,
            'logtostderr': False,
            'quiet': True,
            'no_warnings': True,
            'default_search': 'auto',
            'source_address': '0.0.0.0',  # bind to ipv4 since ipv6 addresses cause issues sometimes
        }
        ffmpeg_options = {
            'options': '-vn -reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5',
        }
        ytdl = youtube_dl.YoutubeDL(ytdl_format_options)
        loop = loop or asyncio.get_event_loop()
        data = await loop.run_in_executor(None, lambda: ytdl.extract_info(url, download=not stream))

        if 'entries' in data:
            # take first item from a playlist
            data = data['entries'][0]

        filename = data['url'] if stream else ytdl.prepare_filename(data)
        return cls(discord.FFmpegPCMAudio(filename, **ffmpeg_options), data=data)

if os.path.isfile('out'):
    try:
        os.remove('out')
    except Exception as e:
        print(f'oopsies {e}')

class Music(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.command()
    async def play(self, ctx, url:str=None) -> None:
        if ctx.voice_client.is_playing():
            ctx.voice_client.stop()
        
        if os.path.isfile('out'):
            try:
                os.remove('out')
            except Exception as e:
                print(f'oopsies {e}')

        m = await ctx.channel.send(content=f'loading...')
        async with ctx.typing():
            plr = await YTDLSource.from_url(url, loop=self.bot.loop)
            ctx.voice_client.play(plr, after=lambda e: print(f'Player error: {e}') if e else None)

        midometer = 'hard' if any(ele in plr.title.lower() for ele in ['the enigma tng','dj sharpnel','yabujin','downtown binary','usao']) else 'mid'
        await m.edit(content=f'now playing `{plr.title}` ({midometer})')

    @commands.command()
    async def leave(self, ctx):
        bot = self.bot
        vc = discord.utils.get(bot.voice_clients, guild=ctx.guild)
        if not vc:
            await ctx.channel.send(content=f'im not in a voice channel')
            return
        await vc.disconnect()

    @commands.command()
    @play.before_invoke
    async def join(self, ctx) -> None:
        bot = self.bot
        vc = ctx.author.voice
        bot_vc = discord.utils.get(bot.voice_clients, guild=ctx.guild)
        if vc == None:
            await ctx.channel.send(content=f'you are not in a voice channel')
            return
        if not bot_vc:
            await vc.channel.connect()

    @commands.command()
    @leave.before_invoke
    @join.before_invoke
    async def stop(self, ctx):
        vc = discord.utils.get(self.bot.voice_clients, guild=ctx.guild)
        if not vc:
            #await ctx.channel.send(content=f'im not in a voice channel')
            #return
            return
        if vc.is_playing():
            ctx.voice_client.stop()
            if os.path.isfile('out'):
                try:
                    os.remove('out')
                except Exception as e:
                    print(f'oopsies {e}')

async def setup(bot):
    await bot.add_cog(Music(bot))